import osmapi
import time
import argparse
import generate_shared
import os
import wikipedia_connection
# docs: http://osmapi.metaodi.ch/

def username():
    return "Mateusz Konieczny - bot account"

def parsed_args():
    parser = argparse.ArgumentParser(description='Production of webpage about validation of wikipedia tag in osm data.')
    parser.add_argument('-file', '-f', dest='file', type=str, help='name of yaml file produced by validator')
    args = parser.parse_args()
    if not (args.file):
        parser.error('Provide yaml file generated by wikipedia validator')
    return args

def get_data(api, id, type):
    if type == 'node':
        return api.NodeGet(id)
    if type == 'way':
        return api.WayGet(id)
    if type == 'relation':
        return api.RelationGet(id)
    assert(False)

def update_element(api, type, data):
    if type == 'node':
        return api.NodeUpdate(data)
    if type == 'way':
        return api.WayUpdate(data)
    if type == 'relation':
        return api.RelationUpdate(data)
    assert(False)

def prerequisite_failure_reason(e, data):
    for key in e['prerequisite'].keys():
        try:
            if e['prerequisite'][key] != data['tag'][key]:
                failed = True
                return("failed " + key + " prerequisite for " + e['osm_object_url'])
        except KeyError:
            failed = True
            return("failed " + key + " prerequisite, as key was missing")
    return None

def main():
    api = osmapi.OsmApi(username = username(), passwordfile = "password.secret")
    # for testing: api="https://api06.dev.openstreetmap.org", 
    # website at https://master.apis.dev.openstreetmap.org/
    args = parsed_args()
    filepath = generate_shared.get_write_location()+"/"+args.file
    if not os.path.isfile(filepath):
        print(filepath + " is not a file, provide an existing file")
        return
    reported_errors = generate_shared.load_data(filepath)
    types = [
        'wikipedia wikidata mismatch - follow redirect',
    ]
    for error_type_id in types:
        error_count = 0
        for e in reported_errors:
            if e['error_id'] == error_type_id:
                type = e['osm_object_url'].split("/")[3]
                id = e['osm_object_url'].split("/")[4]
                language_code = wikipedia_connection.get_language_code_from_link(e['prerequisite']['wikipedia'])
                if language_code != "pl":
                    continue
                try:
                    data = get_data(api, id, type)
                except osmapi.ElementDeletedApiError:
                    print(type + " " + id + " that was with " + e['desired_wikipedia_target'] + " was deleted.")
                    continue
                failure = prerequisite_failure_reason(e, data)
                if failure != None:
                    print(failure)
                    continue
                description = "Changing [wikipedia=" + data['tag']['wikipedia'] + "] to [wikipedia=" + e['desired_wikipedia_target'] + "], as current tag is a redirect and the new page matches present wikidata"
                print(description)
                data['tag']['wikipedia'] = e['desired_wikipedia_target']
                api.ChangesetCreate({"comment": description, "automatic": "yes", "discussion_before_edits": "https://forum.openstreetmap.org/viewtopic.php?id=59649"})
                update_element(api, type, data)
                api.ChangesetClose()
                print("Sleeping")
                time.sleep(60)

main()